{
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "{instanceId}"
  },
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "minutes",
              "minutesInterval": 1
            }
          ]
        }
      },
      "id": "54f98a44-f703-4759-8014-7e3d99d0926c",
      "name": "Schedule Trigger",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.1,
      "position": [
        -2520,
        818
      ]
    },
    {
      "parameters": {
        "content": "## Send reply email to customer",
        "height": 316.0628750741319,
        "width": 827.3071557661215,
        "color": 5
      },
      "id": "1515acd8-af48-4b8e-9b06-7b1cad664051",
      "name": "Sticky Note",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1020,
        1560
      ]
    },
    {
      "parameters": {
        "jsCode": "const inputText = $input.first().json.arguments.message;\nconst formattedText = inputText.replace(/\\n/g, '<br>');\n\nreturn [{ json: { text: formattedText } }];\n"
      },
      "id": "c824a467-4572-44da-9d8b-f296a3a2219c",
      "name": "Response Body",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1120,
        1660
      ]
    },
    {
      "parameters": {
        "html": "<!DOCTYPE html>\n\n<html>\n<head>\n  <meta charset=\"UTF-8\" />\n  <title>Customer Support</title>\n</head>\n<body>\n  <div class=\"container\">\n    <p>{{ $json.text }}</p>\n  </div>\n</body>\n</html>\n\n<style>\n.container {\n  background-color: #ffffff;\n  text-align: left;\n  padding: 16px;\n  border-radius: 8px;\n}\n\nh1 {\n  color: #ff6d5a;\n  font-size: 24px;\n  font-weight: bold;\n  padding: 8px;\n}\n\nh2 {\n  color: #909399;\n  font-size: 18px;\n  font-weight: bold;\n  padding: 8px;\n}\n</style>"
      },
      "id": "b124c0bb-82f7-45d6-b4dc-9cf5eb707c15",
      "name": "HTML",
      "type": "n8n-nodes-base.html",
      "typeVersion": 1.2,
      "position": [
        1300,
        1660
      ]
    },
    {
      "parameters": {
        "operation": "reply",
        "messageId": {
          "__rl": true,
          "value": "={{ $('[MS] Get Messages').first().json.id }}",
          "mode": "id"
        },
        "message": "={{ $json.html }}",
        "options": {}
      },
      "id": "6c9b7160-fa6d-4a50-9da0-e2b3b3464358",
      "name": "Microsoft Outlook",
      "type": "n8n-nodes-base.microsoftOutlook",
      "typeVersion": 2,
      "position": [
        1475,
        1660
      ],
      "credentials": {
        "microsoftOutlookOAuth2Api": {
          "id": "BKECBNxQv2VHr3oq",
          "name": "Outlook Account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.openai.com/v1/chat/completions",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "openAiApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "messages",
              "value": "={{ $json.messages }}"
            },
            {
              "name": "model",
              "value": "=gpt-4-turbo"
            },
            {
              "name": "max_tokens",
              "value": "={{ 300 }}"
            },
            {
              "name": "response_format",
              "value": "={{ { \"type\": \"json_object\"} }}"
            }
          ]
        },
        "options": {
          "timeout": 60000
        }
      },
      "id": "b98d027a-7d78-4b41-ae32-ce8f45a6e9cb",
      "name": "[OpenAI] Vision",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        1760,
        680
      ],
      "credentials": {
        "openAiApi": {
          "id": "6z8ebHXpAz6xH8ku",
          "name": "OpenAi"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Assuming 'binaryData' contains the binary data of the image\n// Convert binary data to a base64 string\n// const image = $input.first().json.photo_link;\nconst image = $input.first().json.data;\n\nlet contentText = `Act as a product defect detector for an e-commerce company that sells a variety of books. The user has sent you a photo of a defective product.\n\nRespond in JSON, refering to the following example:\n\n{\n  'isDefective': true\n  'reason': 'The book shows visible damage on the cover, it seems to be torn.'\n}\n`;\n\n// Constructing system message\nlet systemMsg = {\n  \"role\": \"system\",\n  \"content\": contentText\n};\n\nlet userMessage = $('Conversation').first().json.messages[0];\n\n// Constructing user message with the base64 encoded image\nlet visionMessage = {\n  \"role\": \"user\",\n  \"content\": [\n    {\n      \"type\": \"text\",\n      \"text\": \"Can you identify the defect as described earlier?\"\n    },\n    {\n      \"type\": \"image_url\",\n      \"image_url\": {\n        \"url\": `data:image/jpeg;base64,${image}`\n      }\n    }\n  ]\n};\n\n// Updating the return statement to include both messages\nconst messages = [];\nmessages.push(systemMsg);\nmessages.push(userMessage);\nmessages.push(visionMessage);\nreturn {messages};\n"
      },
      "id": "b0cb94fa-7ab6-49b6-bfa4-d76fb6c96b21",
      "name": "System Message (Vision)",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1540,
        680
      ]
    },
    {
      "parameters": {
        "operation": "binaryToPropery",
        "options": {
          "encoding": "base64"
        }
      },
      "id": "308e74d6-7e7b-4fcd-a14a-b4b6318744b8",
      "name": "Extract from File",
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        1320,
        680
      ]
    },
    {
      "parameters": {
        "content": "## Review photo (vision)",
        "height": 351.8163438480556,
        "width": 1119.277563773595,
        "color": 5
      },
      "id": "8f8bba2f-0ba6-46ff-8cbc-4543c6211038",
      "name": "Sticky Note1",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1020,
        560
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "jsCode": "const toolCallsRaw = $input.first().json.choices[0].message.content;\n\nconst toolCallsCleaned = toolCallsRaw.replace(/(\\r\\n|\\n|\\r)/gm, \"\").replace(/\\s+/g, \" \");\nconsole.log(\"toolCallsCleaned\",toolCallsCleaned);\nconst parsedArguments = JSON.parse(toolCallsCleaned);\nconsole.log(\"parsedArguments\",parsedArguments);\n\nconst isDefective= parsedArguments.isDefective;\nconst reason = parsedArguments.reason;\n\nreturn [\n  {\n    json: {\n      isDefective,\n      reason,\n    }\n  }\n];\n"
      },
      "id": "5a4b8ba2-30be-489a-b6f4-d197fd80dabe",
      "name": "Parse JSON arguments3",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1980,
        680
      ]
    },
    {
      "parameters": {
        "jsCode": "console.log(\"Starting the script...\");\n\n// Initialize empty arrays for messages from each stream\nlet stream1Messages = [];\nlet stream2Messages = [];\n\n// Try to get messages from stream1 if they exist\nconst stream1Output = $('Strip HTML').first().json;\nconsole.log(\"Stream1 Output: \", stream1Output);\n\nif (stream1Output && stream1Output.hasOwnProperty('messages')) {\n    console.log(\"Found messages in Stream1\");\n    stream1Messages = stream1Output.messages;\n} else {\n    console.log(\"No messages found in Stream1 or Stream1 is not defined\");\n}\n\ntry {\n    // Try to get messages from stream2 if they exist\n    const stream2Output = $('Function Response').first().json;\n    console.log(\"Stream2 Output: \", stream2Output);\n\n    if (stream2Output && stream2Output.hasOwnProperty('messages')) {\n        console.log(\"Found messages in Stream2\");\n        stream2Messages = stream2Output.messages;\n    } else {\n        console.log(\"No messages found in Stream2 or Stream2 is not defined\");\n    }\n} catch (error) {\n    // Handle error (e.g., IF node not executed)\n    console.log(\"Error: IF node has not been executed or no data is available.\");\n}\n\n// Combine the messages only if stream2Messages exists and is not empty\nif (stream2Messages.length > 0) {\n    console.log(\"Combining messages from Stream1 and Stream2\");\n    stream1Messages = [...stream1Messages, ...stream2Messages];\n} else {\n    console.log(\"No messages to combine from Stream2, using Stream1 messages only\");\n}\n\nconsole.log(\"Final combined messages: \", stream1Messages);\n\nreturn { json: { messages: stream1Messages } };\n"
      },
      "id": "463bf0db-6cd9-4650-bbde-38ce2388bca0",
      "name": "Merge Function Resp",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        -1600,
        820
      ],
      "executeOnce": true
    },
    {
      "parameters": {
        "jsCode": "return $input.first().json.toolCalls.map(toolCall => {\n  return {\n    json: toolCall,\n  }\n})"
      },
      "id": "5c60571e-0f06-4331-b86f-92d6732a081f",
      "name": "Itemize",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        240,
        680
      ]
    },
    {
      "parameters": {
        "content": "## Customer Service Rep Agent",
        "height": 298.45126420731236,
        "width": 816.7012663065507
      },
      "id": "a275447d-5e31-4ad3-8551-f73bfbc5cda7",
      "name": "Sticky Note25",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -1160,
        720
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "605ff3ce-3e49-4ed7-89ef-271b3e60701d",
              "name": "toolCalls",
              "value": "={{ $('[OpenAI] Tools').item.json.choices[0].message.tool_calls }}",
              "type": "array"
            }
          ]
        },
        "options": {}
      },
      "id": "29dd5159-ff5e-4dc6-ae20-1b6bc745540d",
      "name": "Tools Set",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.3,
      "position": [
        40,
        680
      ]
    },
    {
      "parameters": {
        "jsCode": "const tools = [\n  {\n  \"type\": \"function\",\n  \"function\": {\n        \"name\": \"verify_order\",\n        \"description\": \"Verifies that the order in the system matches the details given by the customer.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"order_id\": {\n                    \"type\": \"string\",\n                    \"description\": \"The customer's order ID.\"\n                },\n            },\n            \"required\": [\n                \"order_id\"\n            ]\n        }\n    },\n  },\n  {\n    \"type\": \"function\",\n    \"function\": {\n          \"name\": \"review_photo\",\n          \"description\": \"Reviews the customer's photo for defects.\",\n          \"parameters\": {\n              \"type\": \"object\",\n              \"properties\": {\n                  \"photo_link\": {\n                      \"type\": \"string\",\n                      \"description\": \"URL of the customer's uploaded photo.\"\n                  },\n              },\n              \"required\": [\n                  \"photo_link\"\n              ]\n          }\n    },\n  },\n  {\n    \"type\": \"function\",\n    \"function\": {\n          \"name\": \"verify_warranty\",\n          \"description\": \"Checks to see if the product is still under warranty.\",\n          \"parameters\": {\n              \"type\": \"object\",\n              \"properties\": {\n                  \"order_id\": {\n                      \"type\": \"string\",\n                      \"description\": \"The customer's order ID.\"\n                  },\n              },\n              \"required\": [\n                  \"order_id\"\n              ]\n          }\n    },\n  },\n  {\n    \"type\": \"function\",\n    \"function\": {\n        \"name\": \"email_customer\",\n        \"description\": \"Sends a reply email to the customer.\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"message\": {\n                    \"type\": \"string\",\n                    \"description\": \"Message to the customer.\"\n                },\n            },\n            \"required\": [\n                \"message\"\n            ]\n        }\n    }\n  }\n];\n\nreturn {tools}; "
      },
      "id": "709aa99a-4a17-4592-877a-6d1c09827930",
      "name": "Tools",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        -1100,
        820
      ]
    },
    {
      "parameters": {
        "fields": {
          "values": [
            {
              "name": "messages",
              "type": "arrayValue",
              "arrayValue": "={{ $input.item.json.messages }}"
            }
          ]
        },
        "include": "none",
        "options": {}
      },
      "id": "d1263a17-12b6-412b-bcef-95db23cd2156",
      "name": "Conversation",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3,
      "position": [
        -1400,
        822
      ],
      "executeOnce": true
    },
    {
      "parameters": {
        "url": "={{ $json.arguments.photo_link }}",
        "options": {
          "response": {
            "response": {
              "responseFormat": "file"
            }
          }
        }
      },
      "id": "d0f5a716-6bf6-440a-9d03-e9621f2f609a",
      "name": "Download image",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1120,
        680
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "f9756d4c-430d-4e7f-9339-21e3575b0960",
              "leftValue": "={{ $('[OpenAI] Tools').item.json.choices[0].message.tool_calls }}",
              "rightValue": "=",
              "operator": {
                "type": "array",
                "operation": "exists",
                "singleValue": true
              }
            },
            {
              "id": "4c46ba27-422a-4c91-b1d7-49d12d52afd7",
              "leftValue": "={{ $('[OpenAI] Tools').item.json.choices[0].message.tool_calls }}",
              "rightValue": "=",
              "operator": {
                "type": "array",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "9686c9d6-2f01-4d6a-a348-bf4b0a6c9943",
      "name": "If wants to call Tools",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        -240,
        820
      ]
    },
    {
      "parameters": {
        "jsCode": "return {response: 'success'}"
      },
      "id": "7ca2a860-720d-406d-b052-3898a66ab16c",
      "name": "Return success",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1660,
        1660
      ]
    },
    {
      "parameters": {},
      "id": "1dae6ba1-0c9d-4c6c-84b1-d5066933bb0d",
      "name": "No Operation, do nothing6",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        40,
        960
      ]
    },
    {
      "parameters": {},
      "id": "5c66813b-781f-4409-afa5-7f73e7ab9649",
      "name": "Merge1",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2.1,
      "position": [
        2340,
        1500
      ]
    },
    {
      "parameters": {
        "content": "## Call Tools",
        "height": 1601.4044572235323,
        "width": 1762.1916229300136
      },
      "id": "6492621b-5e2b-4c91-9be1-b0ea019b4184",
      "name": "Sticky Note2",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        460,
        460
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "jsCode": "const messages = [];\n\n// Push original message\nconst message = $('[OpenAI] Tools').item.json.choices[0].message;\nmessages.push({role: message.role, content: message.content, tool_calls: message.tool_calls});\n\n// Push tool responses\nconst inputs = $input.all();\nconst toolCalls = $('Tools Set').item.json.toolCalls;\n\nif (inputs.length !== toolCalls.length) {\n    return {error: \"Inputs and Tool Calls length mismatch\"};\n}\n\ninputs.forEach((input, index) => {\n    const tool_call_id = toolCalls[index].id;\n    const role = 'tool'; // Assuming this is constant\n    const name = toolCalls[index].function.name;\n\n    const content = JSON.stringify(input.json);\n    messages.push({tool_call_id, role, name, content});\n});\n\nreturn {messages: messages};\n"
      },
      "id": "749aa91f-45a8-455c-a18e-7fd9f03e467c",
      "name": "Function Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        2660,
        1780
      ]
    },
    {
      "parameters": {
        "jsCode": "const input = {\n    messages: $('Conversation').first().json.messages.slice()\n}\n\nlet content = `Act as a Customer Support Rep. The customer has sent you their order ID, \nshipping address, and a photo of a defective product they recently purchased. \nYour goal is to walk through this entire process with the customer.\n\nSteps to accomplish your task:\n1. Verify that the photo shows defects (function: review_photo)\n2. Verify that the product is still under warranty. Products are under warranty if purchased within the past 365 days (function: verify_warranty)\n3. Decide if a replacement should be shipped to the customer - replacements are offered if a valid order ID is given, it's covered under warranty, and the photo review shows damage the product\n4. Email your decision to the customer (function: email_customer)\n5. Terminate\n\nRules of engagement:\n- Stick to the procedure and don't invent your own steps\n- Stick to your role, and politely decline off-topic questions\n- Do not output messages, only call functions`;\n\nlet systemMsg = {\n  \"role\": \"system\",\n  \"content\": `${content}`\n};\n\ninput.messages.splice(0, 0, systemMsg); // second from top\n\nreturn input; // returns the updated array"
      },
      "id": "af99ec77-d97d-43b2-afc9-b87f7a08a7fb",
      "name": "System Message",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        -900,
        820
      ]
    },
    {
      "parameters": {
        "jsCode": "const messages = [];\nconst response = $input.first().json.choices[0].message;\n\nmessages.push(response);\nreturn {messages: messages};"
      },
      "id": "1035a2f4-3a1d-4cf9-a8b1-dfd649dddf36",
      "name": "Function Resp (w/ History)",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        -480,
        820
      ]
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "function assembleReturnObject(arguments) {\n  // Step 1: Clean and parse input\n  const argumentsCleaned = arguments.replace(/(\\r\\n|\\n|\\r)/gm, \"\").replace(/\\s+/g, \" \");\n  const parsedArguments = JSON.parse(argumentsCleaned);\n\n  // Step 2: Dynamically create the return object based on keys in parsedArguments\n  const returnObject = Object.keys(parsedArguments).reduce((acc, key) => {\n    // Use the key to dynamically set the value in the accumulated object\n    acc[key] = parsedArguments[key];\n    return acc;\n  }, {});\n\n  // Step 3: Assemble into the required return format\n  return returnObject;\n}\n\n// Example usage:\nconst name = $('Itemize').item.json.function.name;\nconst arguments = $('Itemize').item.json.function.arguments;\nconst result = {\n  name: name,\n  arguments: assembleReturnObject(arguments)\n};\nreturn result;"
      },
      "id": "7d6c5410-f03b-40d0-ad97-d1ee0c2f26b9",
      "name": "Parse JSON arguments",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        520,
        680
      ]
    },
    {
      "parameters": {
        "url": "={{ $json.baseUrl + $json.endpoint }}",
        "options": {},
        "headerParametersUi": {
          "parameter": [
            {
              "name": "Accept",
              "value": "application/json"
            },
            {
              "name": "x-amz-access-token",
              "value": "={{ $('Configure Set').first().json.accessToken }}"
            }
          ]
        }
      },
      "name": "Get Order",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        1320,
        1160
      ],
      "id": "250cf84e-39e5-4734-9f9f-c34c44a92ea0",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "088ae7c6-b527-4ed3-b3ea-0a4a18a4c203",
              "name": "purchaseDate",
              "value": "={{ $json.payload.PurchaseDate }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "d68fee0d-6f9f-441e-afb4-4cdd5dd2fe86",
      "name": "Order Set",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.3,
      "position": [
        1540,
        1040
      ]
    },
    {
      "parameters": {
        "jsCode": "function daysBetween(dateString) {\n  const specifiedDate = new Date(dateString);\n  const today = new Date();\n\n  // Set the time of both dates to 00:00:00 to calculate the difference in days accurately\n  specifiedDate.setHours(0, 0, 0, 0);\n  today.setHours(0, 0, 0, 0);\n\n  const millisecondsPerDay = 24 * 60 * 60 * 1000; // Number of milliseconds in a day\n  const differenceInMilliseconds = today - specifiedDate;\n\n  const differenceInDays = differenceInMilliseconds / millisecondsPerDay;\n\n  return Math.floor(differenceInDays); // Returns the integer part of the difference\n}\n\n// Example usage:\nconst days = daysBetween($input.first().json.purchaseDate);\nconsole.log(days);\nreturn [{purcased_days_ago: days}];\n"
      },
      "id": "5de0cf51-e94a-4453-b298-411b9ab115ce",
      "name": "Calculate Order Age",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1760,
        1080
      ]
    },
    {
      "parameters": {
        "content": "## Verify warranty",
        "height": 483.24278127339744,
        "width": 888.9768815487378,
        "color": 5
      },
      "id": "2db72129-edd8-4008-87f9-febf93e37f86",
      "name": "Sticky Note3",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1020,
        980
      ],
      "typeVersion": 1
    },
    {
      "parameters": {},
      "id": "35e477b0-3bc3-4e36-a96f-31b21da4b002",
      "name": "No Operation, do nothing2",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        1540,
        1280
      ]
    },
    {
      "parameters": {},
      "id": "6dd3fdea-3673-4009-80e3-d659e4d776bc",
      "name": "Merge2",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2.1,
      "position": [
        2480,
        1660
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "d64dda52-4e6a-4b3e-ad46-a8b221963055",
              "name": "baseUrl",
              "value": "={{ $('Configure Set').first().json.baseUrl }}",
              "type": "string"
            },
            {
              "id": "bc779325-5a2b-45ce-b7df-b957e5a8aab6",
              "name": "endpoint",
              "value": "={{ `/orders` }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "790a2420-2fca-404d-bf46-e2367a132099",
      "name": "REST Set",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.3,
      "position": [
        1120,
        1160
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "4cfa7e62-17b1-41da-ae35-4bdaf478672a",
              "name": "accessToken",
              "value": "{some_access_token}",
              "type": "string"
            },
            {
              "id": "985fe47d-c6d9-4b07-afbc-ffaaa95ee134",
              "name": "baseUrl",
              "value": "{some_base_url}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "2839e0fa-0a19-4bdd-88ac-4d716bafb42b",
      "name": "Configure Set",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.3,
      "position": [
        -2300,
        818
      ]
    },
    {
      "parameters": {
        "operation": "getAll",
        "returnAll": true,
        "output": "raw",
        "filtersUI": {
          "values": {
            "filters": {
              "custom": "isRead eq false and (categories/any(c:c eq 'robot'))",
              "foldersToInclude": [
                "{some_folder_id}"
              ]
            }
          }
        },
        "options": {}
      },
      "id": "8f18298c-0c0e-475c-9a99-1f949f094816",
      "name": "[MS] Get Messages",
      "type": "n8n-nodes-base.microsoftOutlook",
      "typeVersion": 2,
      "position": [
        -2080,
        820
      ],
      "credentials": {
        "microsoftOutlookOAuth2Api": {
          "id": "BKECBNxQv2VHr3oq",
          "name": "Outlook Account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Regular expression to match HTML tags\nvar allhtm = /(<([^>]+)>)/ig;\n// Regular expression specifically to match <br> and <br/> tags\nvar brTag = /<br\\s*\\/?>/ig;\n\n// Loop over input items and replace <br> tags with newlines, then remove other HTML tags\nfor (const item of $input.all()) {\n  if (item.json && item.json.body && item.json.body.content) {\n    // First replace <br> tags with newlines\n    var contentWithNewLines = item.json.body.content.replace(brTag, '\\n');\n    // Then remove all other HTML tags\n    item.json.messages = [{role: \"user\", content: contentWithNewLines.replace(allhtm, '').trim()}];\n  } else {\n    // Handle cases where the expected structure is missing\n    console.error('Invalid item structure:', item);\n  }\n}\n\nreturn $input.all();\n"
      },
      "id": "e4d659d0-50bb-45f5-be55-edb14ba3742f",
      "name": "Strip HTML",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1840,
        820
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.openai.com/v1/chat/completions",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "openAiApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "messages",
              "value": "={{ $input.first().json.messages }}"
            },
            {
              "name": "model",
              "value": "=gpt-4-turbo"
            },
            {
              "name": "temperature",
              "value": "={{ 0 }}"
            },
            {
              "name": "frequency_penalty",
              "value": "={{ 1 }}"
            },
            {
              "name": "max_tokens",
              "value": "={{ 300 }}"
            },
            {
              "name": "tools",
              "value": "={{ $('Tools').item.json.tools }}"
            },
            {
              "name": "presence_penalty",
              "value": "={{ 0 }}"
            }
          ]
        },
        "options": {
          "timeout": 60000
        }
      },
      "id": "9c9d026e-ee8b-4b75-a4ee-0d768752285f",
      "name": "[OpenAI] Tools",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        -680,
        820
      ],
      "credentials": {
        "openAiApi": {
          "id": "6z8ebHXpAz6xH8ku",
          "name": "OpenAi"
        }
      }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict"
                },
                "conditions": [
                  {
                    "id": "c9bad1be-9060-4e08-9f1b-acfed7128d2c",
                    "leftValue": "={{ $json.name }}",
                    "rightValue": "review_photo",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "photo"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict"
                },
                "conditions": [
                  {
                    "id": "a972fe9f-09bd-4106-b3fb-e6ec345c2e0f",
                    "leftValue": "={{ $json.name }}",
                    "rightValue": "verify_warranty",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "warranty"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict"
                },
                "conditions": [
                  {
                    "id": "b3727258-09b7-4ec0-9e26-544168c319f3",
                    "leftValue": "={{ $json.name }}",
                    "rightValue": "email_customer",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "email"
            }
          ]
        },
        "options": {}
      },
      "id": "245b2707-836e-4dd8-aed9-f3dbe47ea047",
      "name": "Route Function",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3,
      "position": [
        720,
        680
      ]
    }
  ],
  "connections": {
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Configure Set",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Response Body": {
      "main": [
        [
          {
            "node": "HTML",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTML": {
      "main": [
        [
          {
            "node": "Microsoft Outlook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Microsoft Outlook": {
      "main": [
        [
          {
            "node": "Return success",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "[OpenAI] Vision": {
      "main": [
        [
          {
            "node": "Parse JSON arguments3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "System Message (Vision)": {
      "main": [
        [
          {
            "node": "[OpenAI] Vision",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from File": {
      "main": [
        [
          {
            "node": "System Message (Vision)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse JSON arguments3": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Function Resp": {
      "main": [
        [
          {
            "node": "Conversation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Itemize": {
      "main": [
        [
          {
            "node": "Parse JSON arguments",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Tools Set": {
      "main": [
        [
          {
            "node": "Itemize",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Tools": {
      "main": [
        [
          {
            "node": "System Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Conversation": {
      "main": [
        [
          {
            "node": "Tools",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download image": {
      "main": [
        [
          {
            "node": "Extract from File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If wants to call Tools": {
      "main": [
        [
          {
            "node": "Tools Set",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "No Operation, do nothing6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Return success": {
      "main": [
        [
          {
            "node": "Merge2",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge1": {
      "main": [
        [
          {
            "node": "Merge2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Function Response": {
      "main": [
        [
          {
            "node": "Merge Function Resp",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "System Message": {
      "main": [
        [
          {
            "node": "[OpenAI] Tools",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Function Resp (w/ History)": {
      "main": [
        [
          {
            "node": "If wants to call Tools",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse JSON arguments": {
      "main": [
        [
          {
            "node": "Route Function",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Order": {
      "main": [
        [
          {
            "node": "Order Set",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "No Operation, do nothing2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Order Set": {
      "main": [
        [
          {
            "node": "Calculate Order Age",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Calculate Order Age": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge2": {
      "main": [
        [
          {
            "node": "Function Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "REST Set": {
      "main": [
        [
          {
            "node": "Get Order",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Configure Set": {
      "main": [
        [
          {
            "node": "[MS] Get Messages",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "[MS] Get Messages": {
      "main": [
        [
          {
            "node": "Strip HTML",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Strip HTML": {
      "main": [
        [
          {
            "node": "Merge Function Resp",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "[OpenAI] Tools": {
      "main": [
        [
          {
            "node": "Function Resp (w/ History)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Route Function": {
      "main": [
        [
          {
            "node": "Download image",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "REST Set",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Response Body",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {}
}